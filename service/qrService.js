const QRCode = require("qrcode");
const path = require("path");
const fs = require("fs");
const db = require("../models");
const Ticket1 = db.Ticket1;
const nodemailer = require("nodemailer");
require("dotenv").config();
const {Order} = require("../models");
const { where } = require("sequelize");
const { error } = require("console");
const { data } = require("autoprefixer");
const { OrderDetail, Seat, Showtime, Movie, User } = require("../models");

// L·∫•y th√¥ng tin email t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const EMAIL_ADMIN = process.env.EMAIL_ADMIN;
const PASS_ADMIN = process.env.PASS_ADMIN;
const URL_CLIENT_BASE = process.env.URL_CLIENT_BASE || "http://localhost:5173";
const SERVER_URL = process.env.SERVER_URL || "http://localhost:3000";
const NODEMAILER_DEBUG = process.env.NODEMAILER_DEBUG === 'true';

// H√†m g·ª≠i email v·ªõi m√£ QR
const sendQRCodeEmail = async ({
  movieName,
  email,
  qrUrl,
  orderId,
  showtime,
  seatDatas,
  total,
}) => {
  
  try {
    // Format l·∫°i showtime ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng
    let formattedShowtime = showtime;
    
    // Ki·ªÉm tra xem showtime c√≥ ƒë·ªãnh d·∫°ng "HH:MM:SS YYYY-MM-DD" kh√¥ng
    if (typeof showtime === 'string' && showtime.includes(':') && showtime.includes('-')) {
      // T√°ch th·ªùi gian v√† ng√†y
      const parts = showtime.split(' ');
      if (parts.length === 2) {
        const timePart = parts[0]; // "20:00:00"
        const datePart = parts[1]; // "2025-04-12"
        
        // T·∫°o chu·ªói ƒë·ªãnh d·∫°ng h·ª£p l·ªá cho Date: "YYYY-MM-DDThh:mm:ss"
        const isoDateString = `${datePart}T${timePart}`;
        
        try {
          // T·∫°o ƒë·ªëi t∆∞·ª£ng Date v√† ƒë·ªãnh d·∫°ng l·∫°i theo m√∫i gi·ªù Vi·ªát Nam
          const date = new Date(isoDateString);
          if (!isNaN(date.getTime())) {
            formattedShowtime = date.toLocaleString('vi-VN', {
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              hour12: false
            });
          } else {
            // Fallback: Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng text ƒë·∫πp h∆°n
            formattedShowtime = `${timePart.substring(0, 5)} ng√†y ${datePart.split('-').reverse().join('/')}`;
          }
        } catch (dateError) {
          console.error('L·ªói khi ƒë·ªãnh d·∫°ng ng√†y:', dateError);
          // Fallback: Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng text n·∫øu l·ªói
          formattedShowtime = `${timePart.substring(0, 5)} ng√†y ${datePart.split('-').reverse().join('/')}`;
        }
      }
    }

    // T·∫°o m√£ QR d·∫°ng Base64 ƒë·ªÉ nh√∫ng tr·ª±c ti·∫øp v√†o email
    const qrCodeDataUri = await QRCode.toDataURL(orderId.toString(), {
      color: {
        dark: "#000000",
        light: "#ffffff",
      },
      width: 300,
      margin: 2,
    });

    const seatNumbers =
      seatDatas && seatDatas.length > 0
        ? seatDatas.map((item) => item.seat_row + item.seat_number).join(", ")
        : "Ch∆∞a c√≥ gh·∫ø";


    const transportConfig = {
      service: "Gmail",
      auth: { user: EMAIL_ADMIN, pass: PASS_ADMIN },
      tls: { rejectUnauthorized: false },
      secureConnection: false,
    };
    
    // Th√™m c√†i ƒë·∫∑t debug n·∫øu ƒë∆∞·ª£c b·∫≠t
    if (NODEMAILER_DEBUG) {
      transportConfig.debug = true;
      transportConfig.logger = true;
    }
    
    const transporter = nodemailer.createTransport(transportConfig);

    // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n QR code
    const qrFilePath = path.join(
      __dirname,
      "../public",
      qrUrl.replace("/qr-codes/", "")
    );

    
    // T·∫°o n·ªôi dung HTML email v·ªõi th√¥ng tin v√© v√† m√£ QR
    const mailOptions = {
      from: {
        name: "Ferg Cinema",
        address: EMAIL_ADMIN,
      },
      to: email,
      subject: "V√© xem phim c·ªßa b·∫°n - Ferg Cinema",
      html: `
                <div style="max-width: 600px; margin: auto; padding: 20px; border: 1px solid #333; border-radius: 10px; font-family: 'Helvetica Neue', Arial, sans-serif; background-color: #121212; color: #e0e0e0;">
                    <div style="text-align: center; margin-bottom: 25px;">
                        <h2 style="color: #ffd700; margin: 0; padding: 0; font-size: 28px;">üêù Ferg CINEMA</h2>
                        <div style="width: 80px; height: 3px; background: linear-gradient(90deg, transparent, #ffd700, transparent); margin: 15px auto;"></div>
                        <h3 style="color: #ffffff; font-weight: 300; margin: 0;">V√â XEM PHIM C·ª¶A B·∫†N</h3>
                    </div>
                    
                    <div style="background-color: #1e1e1e; padding: 20px; border-radius: 8px; margin-bottom: 25px; border: 1px solid #333; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                        <h4 style="color: #ffd700; margin-top: 0; border-bottom: 1px solid #333; padding-bottom: 10px; font-size: 18px;">TH√îNG TIN V√â</h4>
                        <table style="width: 100%; border-collapse: collapse; color: #e0e0e0;">
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; width: 40%;">Phim:</td>
                                <td style="padding: 8px 0;">${movieName}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; border-top: 1px dotted #333;">Su·∫•t chi·∫øu:</td>
                                <td style="padding: 8px 0; border-top: 1px dotted #333;">${formattedShowtime}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; border-top: 1px dotted #333;">Gh·∫ø:</td>
                                <td style="padding: 8px 0; border-top: 1px dotted #333;">${seatNumbers}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; border-top: 1px dotted #333;">M√£ v√©:</td>
                                <td style="padding: 8px 0; border-top: 1px dotted #333;">${orderId}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; border-top: 1px dotted #333;">Gi√°:</td>
                                <td style="padding: 8px 0; border-top: 1px dotted #333;">${Number(total).toLocaleString("vi-VN")} VND</td>
                            </tr>
                        </table>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 25px; background-color: #1e1e1e; padding: 20px; border-radius: 8px; border: 1px solid #333; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                        <p style="font-weight: bold; color: #ffd700; margin-bottom: 15px; font-size: 18px;">M√É QR C·ª¶A B·∫†N</p>
                        <div style="background-color: white; width: 210px; height: 210px; padding: 5px; margin: 0 auto; border-radius: 5px;">
                            <img src="cid:qrcode" alt="QR Code" style="width: 200px; height: 200px; margin: 0 auto; display: block;">
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 25px;">
                        <a href="${SERVER_URL}/public${qrUrl}" 
                           download="QR_Ticket_${orderId}.png"
                           style="background-color: #ffd700; color: #000000; padding: 12px 24px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block; text-transform: uppercase; letter-spacing: 1px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); transition: all 0.3s;">
                           T·∫£i m√£ QR
                        </a>
                    </div>
                    
                    <div style="text-align: center; border-top: 1px solid #333; padding-top: 20px; margin-top: 20px;">
                        <p style="font-size: 14px; color: #b0b0b0; margin: 5px 0;">Vui l√≤ng xu·∫•t tr√¨nh m√£ QR n√†y khi ƒë·∫øn r·∫°p ƒë·ªÉ nh·∫≠n v√©.</p>
                        <p style="font-size: 14px; color: #b0b0b0; margin: 5px 0;">N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c hotline.</p>
                        <p style="font-size: 14px; color: #b0b0b0; margin: 5px 0;">Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám xem phim tuy·ªát v·ªùi!</p>
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px;">
                        <div style="width: 100%; height: 1px; background: linear-gradient(90deg, transparent, #333, transparent); margin: 15px auto;"></div>
                        <p style="font-size: 12px; color: #666; margin-top: 15px;">¬© 2024 Ferg Cinema. All rights reserved.</p>
                        <div style="margin-top: 15px;">
                            <a href="#" style="display: inline-block; margin: 0 10px; color: #ffd700; text-decoration: none;">Website</a>
                            <a href="#" style="display: inline-block; margin: 0 10px; color: #ffd700; text-decoration: none;">Facebook</a>
                            <a href="#" style="display: inline-block; margin: 0 10px; color: #ffd700; text-decoration: none;">Instagram</a>
                        </div>
                    </div>
                </div>
            `,
      attachments: [
        {
          filename: "QR_Ticket_" + orderId + ".png",
          path: path.join(__dirname, "../public", qrUrl),
          cid: "qrcode",
          contentType: "image/png",
        },
      ],
      // Th√™m headers ƒë·ªÉ gi·∫£m kh·∫£ nƒÉng b·ªã ƒë√°nh d·∫•u l√† spam
      headers: {
        "X-Priority": "1",
        "X-MSMail-Priority": "High",
        Importance: "High",
      },
    };

    const info = await transporter.sendMail(mailOptions);
    
    // Ghi log v√†o file
    const logMessage = `${new Date().toISOString()} - Email sent successfully to ${email} for order ${orderId} - MessageID: ${info.messageId}\n`;
    try {
      const logDir = path.join(__dirname, "../logs");
      if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
      }
      fs.appendFileSync(path.join(logDir, "nodemailer.log"), logMessage);
    } catch (logError) {
      console.error("Kh√¥ng th·ªÉ ghi log email:", logError);
    }

    return {
      success: true,
      message: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!",
      emailId: info.messageId,
    };
  } catch (error) {
    console.error("L·ªói g·ª≠i email m√£ QR:", error.message);
    console.error("Chi ti·∫øt l·ªói:", error);
    
    // In th√™m th√¥ng tin ƒë·ªÉ debug
    console.error(`Th√¥ng tin g·ª≠i email b·ªã l·ªói:
      - Email: ${email || 'kh√¥ng c√≥'}
      - OrderId: ${orderId || 'kh√¥ng c√≥'}
      - MovieName: ${movieName || 'kh√¥ng c√≥'}
      - ShowTime: ${showtime || 'kh√¥ng c√≥'}
      - QR URL: ${qrUrl || 'kh√¥ng c√≥'}
      - SeatDatas: ${seatDatas ? JSON.stringify(seatDatas) : 'kh√¥ng c√≥'}
    `);
    
    // Ghi log l·ªói v√†o file
    const errorLogMessage = `${new Date().toISOString()} - ERROR sending email to ${email} for order ${orderId} - ${error.message}\n${error.stack || 'No stack trace'}\n---\n`;
    try {
      const logDir = path.join(__dirname, "../logs");
      if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
      }
      fs.appendFileSync(path.join(logDir, "nodemailer-errors.log"), errorLogMessage);
    } catch (logError) {
      console.error("Kh√¥ng th·ªÉ ghi log l·ªói email:", logError);
    }
    
    return {
      success: false,
      message: "L·ªói g·ª≠i email: " + error.message,
      error,
    };
  }
};

// T·∫°o v√† l∆∞u m√£ QR cho v√©
const generateQRCode = async (data) => {
  try {    
    // Tr√≠ch xu·∫•t d·ªØ li·ªáu
    const {
      movieName,
      showtime,
      seatDatas,
      orderId,
      total,
      user_id,
      email
    } = data;
    
    if (!orderId) {
      throw new Error("Thi·∫øu orderId, kh√¥ng th·ªÉ t·∫°o m√£ QR.");
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu gh·∫ø
    let formattedSeatDatas = seatDatas;
    
    // Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu gh·∫ø t·ª´ Sequelize model n·∫øu c·∫ßn
    if (seatDatas && Array.isArray(seatDatas)) {
      formattedSeatDatas = seatDatas.map(seat => {
        // N·∫øu l√† Sequelize model (c√≥ dataValues)
        if (seat && seat.dataValues) {
          return {
            id: seat.dataValues.id,
            seat_row: seat.dataValues.seat_row,
            seat_number: seat.dataValues.seat_number,
            price: seat.dataValues.price
          };
        }
        // N·∫øu l√† object JavaScript th√¥ng th∆∞·ªùng
        return seat;
      });
    }
        
    // T·∫°o t√™n file duy nh·∫•t
    const fileName = `qr_${Date.now()}.png`;
    const filePath = path.join(__dirname, "../public/qr-codes", fileName);

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    await fs.promises.mkdir(path.join(__dirname, "../public/qr-codes"), {
      recursive: true,
    });

    // T·∫°o m√£ QR
    await QRCode.toFile(filePath, orderId.toString(), {
      color: {
        dark: "#000000",
        light: "#ffffff",
      },
      width: 400,
      margin: 2,
    });

    // Tr·∫£ v·ªÅ URL c·ªßa m√£ QR
    const qrUrl = `/qr-codes/${fileName}`;
    const qr_code = `/public${qrUrl}`;
    
    // L∆ØU √ù: Kh√¥ng c·∫≠p nh·∫≠t qr_code v√†o b·∫£ng Order ·ªü ƒë√¢y
    // Thay v√†o ƒë√≥ s·∫Ω tr·∫£ v·ªÅ qrUrl v√† qr_code ƒë·ªÉ service g·ªçi h√†m n√†y t·ª± c·∫≠p nh·∫≠t
    
    // N·∫øu c√≥ email trong d·ªØ li·ªáu, g·ª≠i m√£ QR qua email
    let emailResult = null;
    if (email) {
      try {
        emailResult = await sendQRCodeEmail({
          movieName,
          email,
          qrUrl,
          showtime,
          seatDatas: formattedSeatDatas, // S·ª≠ d·ª•ng d·ªØ li·ªáu gh·∫ø ƒë√£ ƒë·ªãnh d·∫°ng
          orderId,
          total,
        });
      } catch (emailError) {
        console.error("L·ªói khi g·ª≠i email:", emailError);
        emailResult = {
          success: false,
          message: "L·ªói g·ª≠i email: " + emailError.message
        };
      }
    }

    return {
      success: true,
      message: 'QR code generated successfully',
      qrUrl,
      qr_code,
      emailResult,
    };
  } catch (error) {
    console.error("L·ªói khi t·∫°o m√£ QR:", error);
    return {
      success: false,
      error: error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o m√£ QR"
    };
  }
};

// Qu√©t v√† x·ª≠ l√Ω m√£ QR
const scanQRCode = async (order_id) => {
  try {
    
    if (!order_id) {
      throw new Error("M√£ ƒë∆°n h√†ng l√† b·∫Øt bu·ªôc");
    }

    // Import models t·ª´ file models
    const { Order, Ticket, Seat, Showtime, Movie, Room, Cinema } = require("../models");

    // T√¨m ƒë∆°n h√†ng trong database
    const order = await Order.findOne({
      include: [
        {
          model: Ticket,
          attributes: ["id"], // b·∫°n c√≥ th·ªÉ l·∫•y th√™m th√¥ng tin n·∫øu c·∫ßn
          include: [
            {
              model: Seat,
              attributes: ["seat_row", "seat_number"],
            },
          ],
        },
        {
          model: Showtime,
          attributes: ["id", "start_time", "show_date"],
          include: [
            {
              model: Movie,
              attributes: ["name", "poster", "age_rating", "duration"],
            },
            {
              model: Room,
              attributes: ["name"],
              include: [
                {
                  model: Cinema,
                  attributes: ["name"],
                },
              ],
            },
          ],
        },
      ],
      where: { id: order_id },
      order: [["order_date", "DESC"]],
    });

    if (!order) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
    }

    // L·∫•y th√¥ng tin th·ªùi gian v√† th·ªùi l∆∞·ª£ng phim
    const showDate = new Date(order.Showtime.show_date);
    const startTime = order.Showtime.start_time;
    const duration = order.Showtime.Movie.duration;

    // Chuy·ªÉn ƒë·ªïi startTime t·ª´ ƒë·ªãnh d·∫°ng "HH:MM:SS" sang Date
    const [hours, minutes, seconds] = startTime.split(':').map(Number);
    showDate.setHours(hours, minutes, seconds);

    // T√≠nh th·ªùi gian k·∫øt th√∫c phim
    const endTime = new Date(showDate);
    endTime.setMinutes(endTime.getMinutes() + duration);

    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    const currentTime = new Date();

    // T√≠nh th·ªùi gian cho ph√©p qu√©t m√£ (10 ph√∫t tr∆∞·ªõc gi·ªù chi·∫øu ƒë·∫øn 10 ph√∫t tr∆∞·ªõc k·∫øt th√∫c)
    const scanStartTime = new Date(showDate);
    scanStartTime.setMinutes(scanStartTime.getMinutes() - 10);

    const scanEndTime = new Date(endTime);
    scanEndTime.setMinutes(scanEndTime.getMinutes() - 10);

    // Ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ n·∫±m trong kho·∫£ng th·ªùi gian cho ph√©p kh√¥ng
    if (currentTime < scanStartTime) {
      return {
        status: 400,
        success: false,
        error: true,
        message: `Qu√° s·ªõm ƒë·ªÉ qu√©t v√©. Vui l√≤ng qu√©t v√© trong kho·∫£ng 10 ph√∫t tr∆∞·ªõc gi·ªù chi·∫øu (${showDate.toLocaleTimeString('vi-VN')})`,
        data: {
          currentTime: currentTime.toLocaleString('vi-VN'),
          allowedScanTime: scanStartTime.toLocaleString('vi-VN')
        }
      };
    }

    if (currentTime > scanEndTime) {
      return {
        status: 400,
        success: false,
        error: true,
        message: `Qu√° mu·ªôn ƒë·ªÉ qu√©t v√©. Th·ªùi gian cho ph√©p qu√©t ƒë√£ k·∫øt th√∫c (10 ph√∫t tr∆∞·ªõc khi phim k·∫øt th√∫c)`,
        data: {
          currentTime: currentTime.toLocaleString('vi-VN'),
          endScanTime: scanEndTime.toLocaleString('vi-VN')
        }
      };
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (order.status === "paid") {
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      order.status = "completed";
      await order.save();

      return {
        status: 200,
        success: true,
        error: false,
        message: "Qu√©t v√© th√†nh c√¥ng",
        data: order
      };
    } else {
      return {
        status: 400,
        success: false,
        error: true,
        message: `ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ (${order.status})`,
        data: {
          order: {
            id: order.id,
            status: order.status,
            updatedAt: order.updatedAt
          }
        }
      };
    }
  } catch (error) {
    console.error("L·ªói khi qu√©t m√£ QR:", error);
    throw error;
  }
};

module.exports = {
  generateQRCode,
  scanQRCode,
  sendQRCodeEmail,
};
